
		Forth words

	To define new word simply start line with word name and follow with definition:

=examples
-washer wash spin rinse spin
-wash 0 print
-spin 1 print
-rinse 2 print
-test washer

	No explicit end of definition word needed, definition ends when line ends.
	Sorry, no multiline definitions, this helps keep them short and clean.

=def
-def compile_def(name,rest):
-	o("static void lang_%s(void) { _tailcall:;",mangle(name))
-	o("static void lang_%s(void);",mangle(name),proto=1)

-	while rest:
-		rest=rest.lstrip()
-		orig=rest
-		s=rest.split(None,1)
-		if not s: break
-		word=s[0]
-		rest=s[1] if len(s)>1 else ''

	Definition can contain macros,

-		l=trymacro(word,rest)
-		if l is not None: rest=l

	parametric macros,

-		elif '[' in word: rest=parametric_macro(orig)

	numbers

-		elif word.isdigit(): o("\tlang_internal_push(%uu);",int(word))

	including negative

-		elif word[0]=='-' and word[1:].isdigit(): o("\tlang_internal_push(%d);",int(word))

	and similarly defined words. Tail call to itself converted to goto.

-		elif word==name and not rest:
-			o("\tgoto _tailcall;")
-		else: o("\tlang_%s();",mangle(word))
-	o("}")


		Data

	All data is stored in arrays of structures.

=examples
	For example, array of 128 vectors defined as:

-data vectors 128 x y z

	Optionally, C type for any field may be specified

-data person 1 age:float

	If omitted, type is CELL (which is uint64_t).

	Also, C-style initializer may be specified (without outer braces).

-data pads 2 x y color = {0,100,1},{0,-100,2}


=data
-def compile_data(rest):
-	init=''
-	if '=' in rest:
-		rest,init=rest.split('=',1)
-		init='={'+init+'}'
-	args=rest.split()
-	name,size=args[:2]
-	size=int(size)
-	fields=args[2:]
-	o("struct lang_data_%s {",mangle(name))
-	for x in fields:
-		if ':' in x:
-			x,t=x.split(':')
-			o("\t%s %s;",t,mangle(x))
-		else:
-			o("\tCELL %s;",mangle(x))
-	o("} lang_data_%s[%u]%s;",mangle(name),size,init)

-	compile_data.data[name]=R(size=size,fields=fields)

-compile_data.data={}



		Macros

	Macros are words defined in python and they are run at compile time. In
	source code they look like ordinary words.

	Each macro function accepts rest of line, perhaps, emit some C code.

	Macro function should return rest of definition (possibly, modified).

=macro
-def trymacro(l,r):
-	f=trymacro.all.get(l)
-	if f: return f(r)
-	return
-trymacro.all={}

	Macros are defined with @macro decorator. Macro name is expected to
	be either have 'm_' prefix or have docstring with real name like

		def newmacro(r):
			";weird/unpythonic/name"
			...

=macro
-def macro(f,n=None):
-	if n: name=n
-	elif f.__doc__: name=f.__doc__
-	else: name=f.__name__[2:]
-	trymacro.all[name]=f


		Parametric macros

	Parametric macros are written in a form: name[.... Everything past
	square bracket are up to macro's interpretation.

	Parametric macros are defined in a very same way as simple macros.

=parametricmacro
-class ParametricMacroNotDefined(Exception):
-	pass

-def parametric_macro(l):
-	w,r=l.split('[',1)
-	f=trymacro.all.get(w)
-	if not f: raise ParametricMacroNotDefined(repr(w))
-	return f(r)

		Data parametric macros

	Parametric macros are used to deal with data.

	Macro rep[] is used for iterating over arrays. It
	advances internal register 'a', used by other data
	macros and executes specified word for each element.

=examples
-test-rep rep[pads show-pads]
-test test-rep

=datamacros
-@macro
-def macro_rep(l):
-	"rep"
-	l,r=l.split(']',1)
-	n,w=l.split();
-	o("\tfor(lang_internal_a=0;lang_internal_a<%u;lang_internal_a++) { lang_%s(); }",compile_data.data[n].size,mangle(w))
-	return r

	Macro @[] accepts two parameters: data and field. This macro
	pushes to stack value of field from array element. Index of
	element is always zero if array contains only one element or
	taken from internal register 'a' if array contains several elements.


=examples
-show-pads @[pads color] print
-test@ @[person age] print
-test test@

=datamacros
-@macro
-def macro_at(l):
-	"@"
-	l,r=l.split(']',1)
-	n,f=l.split()
-	index='lang_internal_a' if compile_data.data[n].size>1 else '0'
-	o("\tlang_internal_push(lang_data_%s[%s].%s);",mangle(n),index,mangle(f))
-	return r

	Macro ![] accepts data and field, pops value from stack and stores
	it into field. Array index is derived in the very same ways as in @[].

=examples
-test! 20 ![person age] @[person age] print
-test test!

=datamacros
-@macro
-def macro_set(l):
-	"!"
-	l,r=l.split(']',1)
-	n,f=l.split()
-	index='lang_internal_a' if compile_data.data[n].size>1 else '0'
-	o("\tlang_data_%s[%s].%s=lang_internal_pop();",mangle(n),index,mangle(f))
-	return r

		Core

	The core of forth is data stack and addressing register.

=stack
-c #include <assert.h>
-c #include <stdint.h>
-c typedef uint64_t CELL;
-c typedef int64_t SCELL;
-c static CELL lang_internal_stack[16];
-c static CELL *lang_internal_tos=lang_internal_stack-1;
-c static CELL lang_internal_a;
-c void lang_internal_push(CELL x) { lang_internal_tos++; assert(lang_internal_tos<lang_internal_stack+16); *lang_internal_tos=x; }
-c CELL lang_internal_pop(void) { assert(lang_internal_tos>=lang_internal_stack); CELL x=*lang_internal_tos--; return x; }

	Forth allow names which are not valid C identifiers.
	We convert everything not in [a-z] into _HEXCHARCODE_. So
	word 1+ will become _31__2B_

=mangle
-def mangle_char(x):
-	if x not in "abcdefghijklmnopqrstuvwxyz": return "_%02X_"%(ord(x),)
-	return x

-def mangle(name):
-	return ''.join([mangle_char(x) for x in name])


	Conditionals are simple ?0; which pops value and exists if it is zero and ?; which
	exists if not zero.

=cond
-@macro
-def returnonzero(l):
-	"?0;"
-	o('if(lang_internal_pop()==0) return;')
-	return l

-@macro
-def returnonnonzero(l):
-	"?;"
-	o('if(lang_internal_pop()) return;')
-	return l

-@macro
-def returnonpositive(l):
-	"?+;"
-	o('if(((SCELL)lang_internal_pop())>0) return;')
-	return l

-@macro
-def returnonnegative(l):
-	"?-;"
-	o('if(((SCELL)lang_internal_pop())<0) return;')
-	return l

	Output is initially accumulated as a list of strings.
	We also have special case for function prototypes.


=coutput
-def o(x,*a,**kw):
-	w=o.code
-	if kw:
-		w=o.proto
-	if a:
-		w.append(x%a)
-	else:
-		w.append(x)
-o.code=[]
-o.proto=[]


	First we load all files into memory as lines

=load
-source=[]

-class posstr(str):
-	def __new__(c,s,name,line):
-		o=str.__new__(c,s)
-		o.name=name
-		o.line=line
-		return o

-class CompileError(BaseException):
-	def __init__(_,l,e):
-		_.l=l
-		_.e=e

-def load_all(l):
-	for x in l:
-		line=0
-		for y in open(x):
-			source.append(posstr(y,x,line))
-			line+=1


	On a first pass we execute all user's pythonic code:

=extendpass
-def extendpass():
-	global source
-	block=None
-	for i in range(len(source)):
-		l=source[i]
-		t=l.split(None,1)
-		if not t: continue
-		if block is None:
-			if t[0]=='extend':
-				block=[]
-				source[i]=None
-		else:
-			if t[0]=='end':
-				exec(''.join(block),globals())
-				block=None
-				source[i]=None
-			else:
-				block.append(l)
-				source[i]=None
-	source=[x for x in source if x is not None]

	Than we compile all 'c' code.

=cpass
-def cpass():
-	global source
-	for i in range(len(source)):
-		l=source[i]
-		try:
-			t=l.split(None,1)
-			if not t: continue
-			name,rest=t
-			if name=='c':
-				compile_c(rest)
-				source[i]=None
-		except Exception as e:
-			raise CompileError(l,e)
-	source=[x for x in source if x is not None]


	On a next pass we evaluate all data lines:

=datapass
-def datapass():
-	global source
-	for i in range(len(source)):
-		l=source[i]
-		t=l.split(None,1)
-		if not t: continue
-		name,rest=t
-		if name=='data':
-			compile_data(rest)
-			source[i]=None
-	source=[x for x in source if x is not None]


	And finally, we compile code

=codepass
-def codepass():
-	for l in source:
-		try:
-			compile_line(l)
-		except Exception as e:
-			raise CompileError(l,e)




	Initially it was written as illiterate code.

=>main.py
-from sys import argv

>mangle
>macro
>parametricmacro
>datamacros
>cond
>load
>extendpass
>cpass
>datapass
>codepass

>coutput

-class Pos: pass

-pos=Pos()

-class R():
-	def __init__(_,**kw):
-		for x,y in kw.items(): setattr(_,x,y)

>data
>def

-def compile_c(l):
-	o(l)

-def compile_cdef(rest):
-	name,code=rest.split(None,1)
-	o("static void lang_%s(void) {",mangle(name))
-	o("static void lang_%s(void);",mangle(name),proto=1)
-	o("\t"+code)
-	o("}")
-	

-def compile_line(l):
-	t=l.split(None,1)
-	if not t: return

-	name,rest=t

-	if name=='cdef': compile_cdef(rest)
-	else: compile_def(name,rest)

-userpass=[]
-def regpass(f):
-	userpass.append(f)

-err=None
-load_all(argv[2:])
-try:
-	extendpass()
-	for x in userpass: x()
-	cpass()
-	datapass()
-	codepass()
-except CompileError as s:
-	if type(s.l)==posstr:
-		print('\nERROR: %s:%s: %s'%(s.l.name,s.l.line,s.l))
-	else:
-		print('\nERROR: generated: %s'%(s.l,))
-	err=s
-if err: raise err.e

-open(argv[1],'w').write("\n".join(o.proto+o.code))

Stack operations

=stackops
-cdef dup CELL x=lang_internal_pop(); lang_internal_push(x); lang_internal_push(x);
-cdef swap CELL x=lang_internal_pop(); CELL y=lang_internal_pop(); lang_internal_push(x); lang_internal_push(y);
-cdef drop lang_internal_pop();

Register A holds index during rep.

=regs
-cdef a lang_internal_push(lang_internal_a);
-cdef a! lang_internal_a=lang_internal_pop();
-cdef a++ lang_internal_a++;


=>runtime.lang
>stack
>stackops
>regs



Bit operations

=bitops
-cdef and lang_internal_push(lang_internal_pop()&lang_internal_pop());
-cdef or lang_internal_push(lang_internal_pop()|lang_internal_pop());
-cdef xor lang_internal_push(lang_internal_pop()^lang_internal_pop());
-cdef shl CELL x=lang_internal_pop(); lang_internal_push(lang_internal_pop()<<x);
-cdef shr CELL x=lang_internal_pop(); lang_internal_push(lang_internal_pop()>>x);

Arithmetics

=arith
-cdef *	lang_internal_push(((SCELL)lang_internal_pop())*((SCELL)lang_internal_pop()));
-cdef +	lang_internal_push(lang_internal_pop()+lang_internal_pop());
-cdef -	CELL a=lang_internal_pop(); CELL b=lang_internal_pop(); lang_internal_push(b-a);
-cdef /	SCELL x=lang_internal_pop(); lang_internal_push(((SCELL)lang_internal_pop())/x);
-cdef */ SCELL d=lang_internal_pop(); SCELL m=lang_internal_pop(); signed __int128 z=(SCELL)lang_internal_pop(); z*=m; lang_internal_push(z/d);

Trigonometry. For trigonometry we use 64-bitians, 1<<64 of them are full rotation. For -1..1 values
we use 9223372036854775807 as 1.

=trig
-trig1 9223372036854775807
-cdef cos SCELL x=9223372036854775807*cos(2*M_PI*(lang_internal_pop()/18446744073709551616.0)); lang_internal_push(x);
-cdef sin SCELL x=9223372036854775807*sin(2*M_PI*(lang_internal_pop()/18446744073709551616.0)); lang_internal_push(x);


=>math.lang
-c #include <math.h>
>bitops
>arith
>trig

=output
-cdef print printf("%lu ",lang_internal_pop());
-cdef sprint printf("%ld ",(SCELL)lang_internal_pop());
-cdef cr printf("\n");

=time
-cdef time64 struct timeval t; gettimeofday(&t,0); lang_internal_push((t.tv_sec<<32)|t.tv_usec);


=>lib.lang
-c #include <stdio.h>
-c #include <sys/time.h>
>output
>time

=>examples.lang
-extend
-@regpass
-def testpass():
-	global source
-	tests=[]
-	for i in range(len(source)):
-		s=source[i].split()
-		if len(s)<2: continue
-		if s[0]!='test': continue

-		source[i]=None
-		tests.extend(s[1:])
-	source=[x for x in source if x is not None]
-	l=["""printf("%%s: ","%s"); lang_%s(); printf("\\n");"""%(x,mangle(x)) for x in tests]
-	source.append('cdef test '+ (''.join(l)))
-	print(source[-1])
-end

>examples
-c int main(void) { lang_test(); return 0; }

